{"version":3,"file":"aws-s3.m.js","sources":["../src/Date.ts","../src/Policy.ts","../src/Signature.ts","../src/S3Client.ts","../src/ErrorThrower.ts","../src/Url.ts","../utils.ts"],"sourcesContent":["import {DateISOString, DateYMD, XAmzDate } from \"./types\";\n\nexport const dateISOString: DateISOString = new Date(+new Date() + 864e5).toISOString();\nexport const xAmzDate: XAmzDate =  dateISOString.split(\"-\").join(\"\").split(\":\").join(\"\").split(\".\").join(\"\");\nexport const dateYMD: DateYMD = dateISOString.split(\"T\")[0].split(\"-\").join(\"\");\n","import { dateISOString, dateYMD, xAmzDate } from \"./Date\";\nimport { IConfig, Policy as PolicyType } from \"./types\";\n\nexport default class Policy {\n  public static getPolicy(config: IConfig): string {\n    const policy = (): PolicyType => {\n      return {\n        expiration: dateISOString,\n        conditions: [\n          { acl: \"public-read\" },\n          { bucket: config.bucketName },\n          [\"starts-with\", \"$key\", `${config.dirName ? config.dirName + \"/\" : \"\"}`],\n          [\"starts-with\", \"$Content-Type\", \"\"],\n          [\"starts-with\", \"$x-amz-meta-tag\", \"\"],\n          { \"x-amz-algorithm\": \"AWS4-HMAC-SHA256\" },\n          {\n            \"x-amz-credential\": `${config.accessKeyId}/${dateYMD}/${\n              config.region\n            }/s3/aws4_request`\n          },\n          { \"x-amz-date\": xAmzDate },\n          { \"x-amz-meta-uuid\": \"14365123651274\" },\n          { \"x-amz-server-side-encryption\": \"AES256\" }\n        ]\n      };\n    };\n    //Returns a base64 policy;\n    return new Buffer(JSON.stringify(policy())).toString(\"base64\").replace(/\\n|\\r/, \"\");\n  };\n};\n","import {IConfig, DateYMD} from \"./types\"\nimport Crypto, { WordArray } from \"crypto-js\";\n\nexport default class Signature {\n    public static getSignature(config: IConfig, date: DateYMD, policyBase64: string): string {\n        const getSignatureKey = (key: string, dateStamp: DateYMD, regionName: string): WordArray => {\n            const kDate: WordArray = Crypto.HmacSHA256(dateStamp, \"AWS4\" + key);\n            const kRegion: WordArray = Crypto.HmacSHA256(regionName, kDate);\n            const kService: WordArray = Crypto.HmacSHA256(\"s3\", kRegion);\n            const kSigning: WordArray = Crypto.HmacSHA256(\"aws4_request\", kService);\n            return kSigning;\n        };\n        const signature = (policyEncoded: string): string => {\n            return Crypto.HmacSHA256(\n                policyEncoded,\n                getSignatureKey(config.secretAccessKey, date, config.region)\n            ).toString(Crypto.enc.Hex);\n        };\n        return signature(policyBase64);\n    }\n}\n","import shortId from 'short-uuid';\nimport { dateYMD, xAmzDate } from \"./Date\";\nimport { IConfig, DeleteResponse, UploadResponse } from \"./types\";\nimport { throwError } from \"./ErrorThrower\";\nimport GetUrl from \"./Url\";\nimport Policy from \"./Policy\";\nimport Signature from \"./Signature\";\nimport {fetchWithProgress} from \"../utils\";\n\nclass S3Client {\n    private config: IConfig;\n    constructor(config: IConfig) {\n      this.config = config;\n    }\n    public async uploadFile(file: File, newFileName: string, progressCb:  ((this: XMLHttpRequest, ev: ProgressEvent) => any) ): Promise<UploadResponse> {\n      throwError(this.config, file);\n\n      const fd = new FormData();\n      const fileExtension: string = file.type.split('/')[1];\n      const fileName: string = `${newFileName || shortId.generate()}.${fileExtension}`;\n      const key: string = `${this.config.dirName ? this.config.dirName + \"/\" : \"\"}${fileName}`;\n      const url: string = GetUrl(this.config);\n      fd.append(\"key\", key);\n      fd.append(\"acl\", \"public-read\");\n      fd.append(\"Content-Type\", file.type);\n      fd.append(\"x-amz-meta-uuid\", \"14365123651274\");\n      fd.append(\"x-amz-server-side-encryption\", \"AES256\");\n      fd.append(\n          \"X-Amz-Credential\",\n          `${this.config.accessKeyId}/${dateYMD}/${this.config.region}/s3/aws4_request`\n      );\n      fd.append(\"X-Amz-Algorithm\", \"AWS4-HMAC-SHA256\");\n      fd.append(\"X-Amz-Date\", xAmzDate);\n      fd.append(\"x-amz-meta-tag\", \"\");\n      fd.append(\"Policy\", Policy.getPolicy(this.config));\n      fd.append(\n          \"X-Amz-Signature\",\n          Signature.getSignature(this.config, dateYMD, Policy.getPolicy(this.config))\n      );\n      fd.append(\"file\", file);\n\n      const data = await fetchWithProgress(url, { method: \"post\", body: fd }, progressCb);\n      if (!data.ok) return Promise.reject(data);\n      return Promise.resolve({\n        bucket: this.config.bucketName,\n        key: `${this.config.dirName ? this.config.dirName + \"/\" : \"\"}${fileName}`,\n        location: `${url}/${this.config.dirName ? this.config.dirName + \"/\" : \"\"}${fileName}`,\n        status: data.status\n      });\n    }\n    public async deleteFile(fileName: string): Promise<DeleteResponse> {\n      const url: string = `https://${this.config.bucketName}.s3${\n        this.config.region ? \"-\" + this.config.region : \"\"\n        }.amazonaws.com/${\n        this.config.dirName ? this.config.dirName + \"/\" : \"\"\n        }${fileName}`;\n\n      const deleteResult = await fetch(url, { method: \"delete\" });\n      if (!deleteResult.ok) return Promise.reject(deleteResult);\n      return Promise.resolve({\n        ok: deleteResult.ok,\n        status: deleteResult.status,\n        message: \"File Deleted\",\n        fileName: fileName\n      });\n    }\n}\n\nexport default S3Client;\n","import { IConfig } from \"./types\";\n\nexport const throwError = (config: IConfig, file: File) => {\n  if (config.bucketName === null || config.bucketName === \"\") {\n    throw new Error(`Your bucketName cannot be empty `);\n  }\n  if (config.region === null || config.region === \"\") {\n    throw new Error(`Must provide a valide region in order to use your bucket`);\n  }\n  if (config.accessKeyId === null || config.accessKeyId === \"\") {\n    throw new Error(`Must provide accessKeyId`);\n  }\n  if (config.secretAccessKey === null || config.secretAccessKey === \"\") {\n    throw new Error(`Must provide secretAccessKey`);\n  }\n  if (!file) {\n    throw new Error(`File cannot be empty`);\n  }\n};\n","import { IConfig } from \"./types\";\n\nconst buildUrl =  ({bucketName, region}: IConfig): string => {\n  const countryCode = region.split(\"-\")[0];\n  \n  if(countryCode === \"cn\"){\n     return `https://${bucketName}.s3.${region}.amazonaws.com.${countryCode}`;\n  } else if (region === \"us-east-1\"){\n     return `https://${bucketName}.s3.${region}.amazonaws.com`;\n  } else {\n    return `https://${bucketName}.s3-${region}.amazonaws.com`;\n  }\n}\n\nexport default (config: IConfig): string => {\n  if (config.s3Url && config.s3Url !== '') {\n    return config.s3Url;\n  }\n  return buildUrl(config);\n}\n","interface ProgressResponse{\n  ok: boolean,\n  status: number,\n  event: XMLHttpRequest,\n}\n\n/**\n * Fetch with porgress callback\n * @param url\n * @param opts\n * @param onProgress\n * @returns {Promise}\n */\nexport function  fetchWithProgress (url: string, opts: RequestInit, onProgress?: ((this: XMLHttpRequest, ev: ProgressEvent) => any)): Promise<Response | ProgressResponse> {\n\n  if(onProgress){ // Backward compatibility\n\n    return new Promise( (res, rej)=>{\n      let xhr = new XMLHttpRequest();\n      if (xhr.upload && onProgress)\n        xhr.upload.onprogress = onProgress; // event.loaded / event.total * 100 ; //event.lengthComputable\n      xhr.open(opts.method || 'get', url, true);\n      xhr.onreadystatechange = function(){\n        if( this.readyState === 4) {\n          if( 200 <= this.status && 299 >= this.status ){\n            let response ={\n              ok: true,\n              status: this.status,\n              event: this\n            };\n            res(response)\n          }else{\n            rej({\n              ok:false,\n              status: this.status,\n              event: this\n            })\n          }\n        }\n      };\n      for (let k in opts.headers || {}) {\n        //@ts-ignore\n        xhr.setRequestHeader(k, opts.headers[k]);\n      }\n      xhr.onload = function(){\n        res(this.response);\n      };\n      xhr.onerror = e => rej;\n      xhr.send(opts.body);\n    });\n  }else{\n    return fetch(url, opts)\n  }\n\n}\n"],"names":["const","dateISOString","Date","toISOString","xAmzDate","split","join","dateYMD","Policy","getPolicy","config","Buffer","JSON","stringify","bucket","bucketName","dirName","toString","replace","Signature","getSignature","date","policyBase64","key","dateStamp","regionName","kDate","kRegion","kService","Crypto","HmacSHA256","secretAccessKey","region","enc","Hex","S3Client","constructor","uploadFile","file","newFileName","progressCb","this","Error","accessKeyId","_this","fd","FormData","fileExtension","type","fileName","shortId","generate","url","s3Url","ref","countryCode","append","opts","onProgress","Promise","res","rej","xhr","XMLHttpRequest","let","k","upload","onprogress","open","method","onreadystatechange","readyState","status","ok","event","headers","setRequestHeader","onload","response","onerror","e","send","body","fetch","fetchWithProgress","data","resolve","reject","deleteFile","deleteResult"],"mappings":"mDAEOA,IAAMC,EAA+B,IAAIC,MAAM,IAAIA,KAAS,OAAOC,cAC7DC,EAAsBH,EAAcI,MAAM,KAAKC,KAAK,IAAID,MAAM,KAAKC,KAAK,IAAID,MAAM,KAAKC,KAAK,IAC5FC,EAAmBN,EAAcI,MAAM,KAAK,GAAGA,MAAM,KAAKC,KAAK,ICDvDE,iBACLC,mBAAUC,UAuBf,IAAIC,OAAOC,KAAKC,UArBd,YACOZ,aACA,CACV,KAAO,eACP,CAAEa,OAAQJ,EAAOK,YACjB,CAAC,cAAe,OAAWL,EAAOM,QAAUN,EAAOM,QAAU,IAAM,IACnE,CAAC,cAAe,gBAAiB,IACjC,CAAC,cAAe,kBAAmB,IACnC,mBAAqB,oBACrB,oBACyBN,kBAAsBH,MAC3CG,6BAGJ,cAAgBN,GAChB,mBAAqB,kBACrB,gCAAkC,cAKIa,SAAS,UAAUC,QAAQ,QAAS,SCxB/DC,iBACHC,sBAAaV,EAAiBW,EAAeC,OAC9BC,EAAaC,EAAoBC,EAChDC,EACAC,EACAC,SAKCC,EAAOC,WAKDR,GAbQC,EAUDb,EAAOqB,gBAVOP,EAUUH,EAVUI,EAUJf,EAAOsB,OATnDN,EAAmBG,EAAOC,WAAWN,EAAW,OAASD,GACzDI,EAAqBE,EAAOC,WAAWL,EAAYC,GACnDE,EAAsBC,EAAOC,WAAW,KAAMH,GACxBE,EAAOC,WAAW,eAAgBF,KAO5DX,SAASY,EAAOI,IAAIC,MCPlC,IAAMC,EAEFC,SAAY1B,QACLA,OAASA,GAEH2B,YAAAA,oBAAWC,EAAYC,EAAqBC,aAC5CC,eCbU/B,EAAiB4B,MAChB,OAAtB5B,EAAOK,YAA6C,KAAtBL,EAAOK,iBACjC,IAAI2B,6CAEU,OAAlBhC,EAAOsB,QAAqC,KAAlBtB,EAAOsB,aAC7B,IAAIU,qEAEe,OAAvBhC,EAAOiC,aAA+C,KAAvBjC,EAAOiC,kBAClC,IAAID,qCAEmB,OAA3BhC,EAAOqB,iBAAuD,KAA3BrB,EAAOqB,sBACtC,IAAIW,0CAEPJ,QACG,IAAII,+BDDGE,EAAKlC,OAAQ4B,OAElBO,EAAK,IAAIC,SACTC,EAAwBT,EAAKU,KAAK3C,MAAM,KAAK,GAC7C4C,GAAsBV,GAAeW,EAAQC,gBAAcJ,EAC3DxB,GAAiBqB,EAAKlC,OAAOM,QAAU4B,EAAKlC,OAAOM,QAAU,IAAM,IAAKiC,EACxEG,GEPI1C,EFOiBkC,EAAKlC,QENzB2C,OAA0B,KAAjB3C,EAAO2C,MAClB3C,EAAO2C,UAdCC,EAgBD5C,cAbG,QAFb6C,eAAqBlD,MAAM,KAAK,eAGjBU,SAAiBiB,oBAAwBuB,EACxC,cAAXvB,aACUjB,SAAiBiB,8BAElBjB,SAAiBiB,6BFY9BwB,OAAO,MAAOjC,KACdiC,OAAO,MAAO,iBACdA,OAAO,eAAgBlB,EAAKU,QAC5BQ,OAAO,kBAAmB,oBAC1BA,OAAO,+BAAgC,YACvCA,OACC,mBACGZ,EAAKlC,uBAAsBH,MAAWqC,EAAKlC,oCAE/C8C,OAAO,kBAAmB,sBAC1BA,OAAO,aAAcpD,KACrBoD,OAAO,iBAAkB,IAC5BX,EAAGW,OAAO,SAAUhD,EAAOC,UAAUmC,EAAKlC,WACvC8C,OACC,kBACArC,EAAUC,aAAawB,EAAKlC,OAAQH,EAASC,EAAOC,UAAUmC,EAAKlC,YAEpE8C,OAAO,OAAQlB,mBG1BxB,SAAoCc,EAAaK,EAAmBC,UAE/DA,EAEM,IAAIC,iBAAUC,EAAKC,OACpBC,EAAM,IAAIC,mBAsBTC,IAAIC,KArBLH,EAAII,QAAUR,IAChBI,EAAII,OAAOC,WAAaT,GAC1BI,EAAIM,KAAKX,EAAKY,QAAU,MAAOjB,GAAK,GACpCU,EAAIQ,mBAAqB,WACC,IAApB7B,KAAK8B,aACH,KAAO9B,KAAK+B,QAAU,KAAO/B,KAAK+B,OAMpCZ,EALc,CACZa,IAAI,EACJD,OAAQ/B,KAAK+B,OACbE,MAAOjC,OAIToB,EAAI,CACFY,IAAG,EACHD,OAAQ/B,KAAK+B,OACbE,MAAOjC,SAKDgB,EAAKkB,SAAW,GAE5Bb,EAAIc,iBAAiBX,EAAGR,EAAKkB,QAAQV,IAEvCH,EAAIe,OAAS,WACXjB,EAAInB,KAAKqC,WAEXhB,EAAIiB,iBAAUC,UAAKnB,GACnBC,EAAImB,KAAKxB,EAAKyB,QAGTC,MAAM/B,EAAKK,GHVG2B,CAAkBhC,EAAK,QAAU,YAAcP,GAAML,kBAAlE6C,UACDA,EAAKZ,GACHd,QAAQ2B,QAAQ,CACrBxE,OAAQ8B,EAAKlC,OAAOK,gBACZ6B,EAAKlC,OAAOM,QAAU4B,EAAKlC,OAAOM,QAAU,IAAM,IAAKiC,WAClDG,OAAOR,EAAKlC,OAAOM,QAAU4B,EAAKlC,OAAOM,QAAU,IAAM,IAAKiC,EAC3EuB,OAAQa,EAAKb,SALMb,QAAQ4B,OAAOF,2CE5B1B3E,EAZG4C,MACXC,GF+CSiC,YAAAA,oBAAWvC,8BAOKkC,iBANI1C,KAAK/B,yBAAL+B,KACxB/B,OAAOsB,OAAS,IADQS,KACG/B,OAAOsB,OAAS,uBADnBS,KAGxB/B,OAAOM,QAHiByB,KAGF/B,OAAOM,QAAU,IAAM,IAC/CiC,EAEiC,QAAU,0BAA1CwC,UACDA,EAAahB,GACXd,QAAQ2B,QAAQ,CACrBb,GAAIgB,EAAahB,GACjBD,OAAQiB,EAAajB,eACZ,wBACCvB,IALiBU,QAAQ4B,OAAOE"}